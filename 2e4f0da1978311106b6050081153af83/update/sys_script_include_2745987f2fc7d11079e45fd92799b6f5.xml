<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_803922_scripts.CMDBUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CMDBUtil</name>
        <script><![CDATA[var CMDBUtil = Class.create();
CMDBUtil.prototype = {
    initialize: function() {
		this.table_data = {};
    },

    type: 'CMDBUtil',
	
	/*
	var c = new x_803922_scripts.CMDBUtil(),
	    tables = [
		  'cmdb_ci_spkg',
		  'cmdb_model'
		],
	    prefixes = [ 'cmdb','samp','cmn','core' ],
		results = c.createDbDiagramBlock( tables, prefixes );
	JSON.stringify( results, null, 2 )
	*/
	
	createDbDiagramBlock: function( tables, prefixes ){
		this.tables = tables || [ 'cmdb_ci' ];
		this.prefixes = prefixes || [ 'cmdb', 'cmn', 'core' ];
		
		var table_data = this.getTableData( tables, prefixes );
		return table_data;
		
		var reference_fields = this.getFieldData( table_data );
		return reference_fields;
		
		var results = this.buildResultString( reference_fields );
		results.push( '\n' );

		return results;
	},
	
	getTableData: function( tables, prefixes ){
		/* Given an array of table names and an array of table prefixes,
		 * gather reference field data for the provided tables and
		 * create reference tables that match the provided prefixes.
		 */
		var data = {};

		data = new global.GlideQuery.parse( 'sys_dictionary', 'nameIN' + this.tables + '^internal_typeINlist,reference,guid' )
		.select( 'name', 'element', 'internal_type', 'reference' )
		.reduce( function( arr, rec ){
			arr.push( rec );
			return arr;
		}, [] );

		return data;
	},
	
	formatTables: function( table_data ){
		
		var result = [],
			tables = Object.keys( table_data );
		tables.forEach( function( table ){
			result.push()
		} );
		
	},

	getFieldData: function( table_data ){
		/* Given an array of table dictionary data,
		 * gather the referenced tables and create a JSON object
		 */
		var reference_fields = {};
		var checkTable = this.checkTable;

		table_data.forEach( function( field ){

			checkTable( field.name, reference_fields, true );
			reference_fields[ field.name ].push( { 'name':field.element, 'type':field.internal_type, 'ref':field.reference } );

			checkTable( field.reference, reference_fields );

		} );

		return reference_fields;
	},

	checkTable: function( table_name, data, alwaysCreate ){
		
		if( data.hasOwnProperty( table_name ) ) return null;

		var prefix = table_name.split('_')[0];
		var prefixes = [ 'cmdb', 'sam', 'samp', 'cmn', 'core' ];

		if( alwaysCreate || prefixes.indexOf( prefix ) > -1 ){
			data[ table_name ] = [];
		}

	},


	buildDiagramString: function( data ){
		var fields = [],
			references = [],
			results = ['\n'],
			tables = Object.keys( data );

		tables.forEach( function( table ){
			var fields = data[ table ];

			results.push( 'Table ' + table + '{' );
			results.push( '  sys_id GUID PK' );

			fields.forEach( function( field ){
				results.push( '  ' + field.name + ' ' + field.ref );
				if( tables.indexOf( field.ref ) > -1 ){
					references.push( 'REF: ' + table + '.' + field.name + ' > ' + field.ref + '.sys_id' );
				}
			} );

			results.push( '}\n' );
		} );

		return results.concat( references );
	}
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-11-15 12:20:00</sys_created_on>
        <sys_id>2745987f2fc7d11079e45fd92799b6f5</sys_id>
        <sys_name>CMDBUtil</sys_name>
        <sys_package display_value="Developer Library" source="x_803922_scripts">2e4f0da1978311106b6050081153af83</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Developer Library">2e4f0da1978311106b6050081153af83</sys_scope>
        <sys_update_name>sys_script_include_2745987f2fc7d11079e45fd92799b6f5</sys_update_name>
    </sys_script_include>
</record_update>
